// <auto-generated />
using System;
using EGeek.Catalog;
using EGeek.Catalog.Infra.Database;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace EGeek.Catalog.Infra.Migrations
{
    [DbContext(typeof(CatalogDbContext))]
    [Migration("20241004014010_AddChangeTracker")]
    partial class AddChangeTracker
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasDefaultSchema("catalog")
                .HasAnnotation("ProductVersion", "8.0.4")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("EGeek.Catalog.ChangeTracker", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("ChangedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("ChangedBy")
                        .IsRequired()
                        .HasMaxLength(128)
                        .HasColumnType("character varying(128)");

                    b.Property<decimal?>("NewPrice")
                        .HasColumnType("numeric");

                    b.Property<int?>("NewStock")
                        .HasColumnType("integer");

                    b.Property<string>("ProductId")
                        .HasColumnType("character varying(36)");

                    b.HasKey("Id");

                    b.HasIndex("ProductId");

                    b.ToTable("ChangeTracker", "catalog");
                });

            modelBuilder.Entity("EGeek.Catalog.Product", b =>
                {
                    b.Property<string>("Id")
                        .HasMaxLength(36)
                        .HasColumnType("character varying(36)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasMaxLength(128)
                        .HasColumnType("character varying(128)");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(512)
                        .HasColumnType("character varying(512)");

                    b.Property<int>("HeightInCentimeters")
                        .HasColumnType("integer");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<decimal>("Price")
                        .HasColumnType("numeric");

                    b.Property<int>("QuantityInStock")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("UpdatedBy")
                        .HasMaxLength(128)
                        .HasColumnType("character varying(128)");

                    b.Property<int>("WeightInGrams")
                        .HasColumnType("integer");

                    b.Property<int>("WidthInCentimeters")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.ToTable("Products", "catalog");
                });

            modelBuilder.Entity("EGeek.Catalog.ChangeTracker", b =>
                {
                    b.HasOne("EGeek.Catalog.Product", null)
                        .WithMany("ChangeTrackers")
                        .HasForeignKey("ProductId");
                });

            modelBuilder.Entity("EGeek.Catalog.Product", b =>
                {
                    b.Navigation("ChangeTrackers");
                });
#pragma warning restore 612, 618
        }
    }
}
